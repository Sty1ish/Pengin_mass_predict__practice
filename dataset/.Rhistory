pbinom(0,12,0.0)
pbinom(0,12,0.02)
1-pbinom(0,12,0.02)
1-pbinom(0,24,0.02)
1-pbinom(0,36,0.02)
1-pbinom(0,48,0.02)
1-pbinom(0,60,0.02)
1-pbinom(0,72,0.02)
1-pbinom(0,84,0.02)
1-pbinom(0,96,0.02)
setwd('C:/Users/styli/Desktop/펭귄/dataset')
library(data.table)
library(dplyr)
library(ggplot2)
train = fread('train.csv')
# 변수 형태 탐색 - 명목형
t.species = table(train$Species)
ggplot(train, aes(Species))+geom_bar()
table(train$Island)
ggplot(train, aes(Island))+geom_bar()
table(train$`Clutch Completion`)
ggplot(train, aes(`Clutch Completion`))+geom_bar()
# 수치형
hist(train$`Culmen Depth (mm)`)
ggplot(train, aes(`Culmen Depth (mm)`)) + geom_boxplot()
hist(train$`Culmen Length (mm)`)
ggplot(train, aes(`Culmen Length (mm)`)) + geom_boxplot()
hist(train$`Flipper Length (mm)`)
ggplot(train, aes(`Flipper Length (mm)`)) + geom_boxplot()
train %>% na.omit() %>%
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% plot()
setwd('C:/Users/styli/Desktop/펭귄/dataset')
library(data.table)
library(dplyr)
library(ggplot2)
train = fread('train.csv')
# 변수 형태 탐색 - 명목형
t.species = table(train$Species)
ggplot(train, aes(Species))+geom_bar()
table(train$Island)
ggplot(train, aes(Island))+geom_bar()
table(train$`Clutch Completion`)
ggplot(train, aes(`Clutch Completion`))+geom_bar()
# 수치형
hist(train$`Culmen Depth (mm)`)
ggplot(train, aes(`Culmen Depth (mm)`)) + geom_boxplot()
hist(train$`Culmen Length (mm)`)
ggplot(train, aes(`Culmen Length (mm)`)) + geom_boxplot()
hist(train$`Flipper Length (mm)`)
ggplot(train, aes(`Flipper Length (mm)`)) + geom_boxplot()
# 명목형
table(train$Sex) # 결측 3
# 수치형
hist(train$`Delta 15 N (o/oo)`)
ggplot(train, aes(`Delta 15 N (o/oo)`)) + geom_boxplot()
hist(train$`Delta 13 C (o/oo)`)
ggplot(train, aes(`Delta 13 C (o/oo)`)) + geom_boxplot()
hist(train$`Body Mass (g)`)
ggplot(train, aes(`Body Mass (g)`)) + geom_boxplot()
# 상관관게 분석(피어슨 상관계수-수치형 자료 한정)
train %>% select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% cor()
# 에러발생
# 결측 탐색.
train %>% is.na() %>% colSums()
# 결측처리 - 행 버리기
train %>% na.omit() %>%
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>%
cor() %>% print()
# 명목형 변수 변경
train[, c('Species', 'Island', 'Clutch Completion', 'Sex')] = lapply(train[ , c('Species', 'Island', 'Clutch Completion', 'Sex')], factor)
str(train)
# 회귀분석
reg = lm(`Body Mass (g)`~.,data = train)
test = fread('test.csv')
test[, c('Species', 'Island', 'Clutch Completion', 'Sex')] = lapply(test[ , c('Species', 'Island', 'Clutch Completion', 'Sex')], factor)
predict(reg, test)
# 베이스라인 회귀 끝.
plot(reg)
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% plot()
# 변수선택
step(reg)
train %>% na.omit() %>%
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% plot()
setwd('C:/Users/styli/Desktop/펭귄/dataset')
library(data.table)
library(dplyr)
library(ggplot2)
train = fread('train.csv')
setwd('C:/Users/styli/Desktop/펭귄/dataset')
library(data.table)
library(dplyr)
library(ggplot2)
train = fread('train.csv')
str(train)
t.species = table(train$Species)
ggplot(train, aes(Species))+geom_bar()
table(train$Species)
ggplot(train, aes(Species))+geom_bar()
table(train$Island)
ggplot(train, aes(Island))+geom_bar()
table(train$`Clutch Completion`)
ggplot(train, aes(`Clutch Completion`))+geom_bar()
# 수치형
hist(train$`Culmen Depth (mm)`)
ggplot(train, aes(`Culmen Depth (mm)`)) + geom_boxplot()
hist(train$`Culmen Length (mm)`)
ggplot(train, aes(`Culmen Length (mm)`)) + geom_boxplot()
hist(train$`Flipper Length (mm)`)
ggplot(train, aes(`Flipper Length (mm)`)) + geom_boxplot()
# 명목형
table(train$Sex) # 결측 3
hist(train$`Delta 15 N (o/oo)`)
ggplot(train, aes(`Delta 15 N (o/oo)`)) + geom_boxplot()
table(train$Species)
table(train$Island)
table(train$`Clutch Completion`)
table(train$Sex) # 결측 3
par(mfrow=c(2,2))
ggplot(train, aes(Species))+geom_bar()
ggplot(train, aes(Island))+geom_bar()
ggplot(train, aes(`Clutch Completion`))+geom_bar()
ggplot(train, aes(Sex))+geom_bar()
par(mfrow=c(2,2))
ggplot(train, aes(Species))+geom_bar()
ggplot(train, aes(Island))+geom_bar()
ggplot(train, aes(`Clutch Completion`))+geom_bar()
ggplot(train, aes(Sex))+geom_bar()
library(gridExtra)
grid.arrange(a,b,c,d nrow=2, ncol=2)
grid
grid.table(a,b,c,d nrow=2, ncol=2)
grid.arrange()
?grid.arrange()
grid.arrange(a,b,c,d, nrow=2, ncol=2)
library(gridExtra)
a = ggplot(train, aes(Species))+geom_bar()
b = ggplot(train, aes(Island))+geom_bar()
c = ggplot(train, aes(`Clutch Completion`))+geom_bar()
d = ggplot(train, aes(Sex))+geom_bar()
grid.arrange(a,b,c,d, nrow=2, ncol=2)
par(mfrow=c(2,3))
hist(train$`Culmen Depth (mm)`)
hist(train$`Culmen Length (mm)`)
hist(train$`Flipper Length (mm)`)
hist(train$`Delta 15 N (o/oo)`)
hist(train$`Delta 13 C (o/oo)`)
hist(train$`Body Mass (g)`)
a = ggplot(train, aes(`Culmen Depth (mm)`)) + geom_boxplot()
b = ggplot(train, aes(`Culmen Length (mm)`)) + geom_boxplot()
c = ggplot(train, aes(`Flipper Length (mm)`)) + geom_boxplot()
d = ggplot(train, aes(`Delta 15 N (o/oo)`)) + geom_boxplot()
e = ggplot(train, aes(`Delta 13 C (o/oo)`)) + geom_boxplot()
f = ggplot(train, aes(`Body Mass (g)`)) + geom_boxplot()
grid.arrange(a,b,c,d,e,f, nrow=2, ncol=3)
rm(a,b,c,d,e,f)
table(train$Species)
table(train$Island)
table(train$`Clutch Completion`)
table(train$Sex) # 결측 3
library(gridExtra)
a = ggplot(train, aes(Species))+geom_bar()
b = ggplot(train, aes(Island))+geom_bar()
c = ggplot(train, aes(`Clutch Completion`))+geom_bar()
d = ggplot(train, aes(Sex))+geom_bar()
grid.arrange(a,b,c,d, nrow=2, ncol=2)
# 수치형
train %>% select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% summary()
train %>% select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% summary()
par(mfrow=c(2,3))
hist(train$`Culmen Depth (mm)`)
hist(train$`Culmen Length (mm)`)
hist(train$`Flipper Length (mm)`)
hist(train$`Delta 15 N (o/oo)`)
hist(train$`Delta 13 C (o/oo)`)
hist(train$`Body Mass (g)`)
a = ggplot(train, aes(`Culmen Depth (mm)`)) + geom_boxplot()
b = ggplot(train, aes(`Culmen Length (mm)`)) + geom_boxplot()
c = ggplot(train, aes(`Flipper Length (mm)`)) + geom_boxplot()
d = ggplot(train, aes(`Delta 15 N (o/oo)`)) + geom_boxplot()
e = ggplot(train, aes(`Delta 13 C (o/oo)`)) + geom_boxplot()
f = ggplot(train, aes(`Body Mass (g)`)) + geom_boxplot()
grid.arrange(a,b,c,d,e,f, nrow=2, ncol=3)
rm(a,b,c,d,e,f)
# 상관관게 분석(피어슨 상관계수-수치형 자료 한정)
train %>% select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% cor()
# 에러발생
# 결측 탐색.
train %>% is.na() %>% colSums()
# 결측처리 - 행 버리기
train %>% na.omit() %>%
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>%
cor() %>% print()
train %>% na.omit() %>%
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% plot()
?step
step(reg, direction = 'both')
# 회귀분석
reg = lm(`Body Mass (g)`~.,data = train)
step(reg, direction = 'both')
par(mfrow=c(2,2))
plot(reg)
# 명목형 변수 변경
train[, c('Species', 'Island', 'Clutch Completion', 'Sex')] = lapply(train[ , c('Species', 'Island', 'Clutch Completion', 'Sex')], factor)
str(train)
# 회귀분석
reg = lm(`Body Mass (g)`~.,data = train)
summary(reg)
test = fread('test.csv')
test[, c('Species', 'Island', 'Clutch Completion', 'Sex')] = lapply(test[ , c('Species', 'Island', 'Clutch Completion', 'Sex')], factor)
# 대충 이렇게 예측하면 되겠지.
head(predict(reg, test))
# 베이스라인 회귀 끝.
# 잔차의 4가정, IID에 특이값. 선형성 정규성, 등분산성가정.
par(mfrow=c(2,2))
plot(reg)
# 변수선택법 사용. both
step(reg, direction = 'both')
step.reg = step(reg, direction = 'both')
summary(step.reg)
# 회귀분석
reg = lm(`Body Mass (g)`~.,data = train)
summary(reg)
test = fread('test.csv')
test[, c('Species', 'Island', 'Clutch Completion', 'Sex')] = lapply(test[ , c('Species', 'Island', 'Clutch Completion', 'Sex')], factor)
# 대충 이렇게 예측하면 되겠지.
head(predict(reg, test))
# 베이스라인 회귀 끝.
# 잔차의 4가정, IID에 특이값. 선형성 정규성, 등분산성가정.
par(mfrow=c(2,2))
plot(reg)
# 변수선택법 사용. both
step.reg = step(reg, direction = 'both')
summary(step.reg)
reticulate::repl_python()
import os
import pandas as pd
import numpy as np
import matplotlib as plt
# 데이터셋 임포트
os.chdir(r'C:\Users\styli\Desktop\펭귄\dataset')
train = pd.read_csv('train.csv')
quit
reticulate::repl_python()
import os
import pandas as pd
import numpy as np
# 데이터셋 임포트
os.chdir(r'C:\Users\styli\Desktop\펭귄\dataset')
train = pd.read_csv('train.csv')
quit
install_miniconda()
list.of.packages<-c('reticulate','coda','dplyr', 'stringr')
new.packages<-list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) {install.packages(new.packages)}
install_miniconda()
list.of.packages<-c('reticulate','coda','dplyr', 'stringr')
new.packages<-list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) {install.packages(new.packages)}
library(reticulate)
install_miniconda()
list.of.packages<-c('reticulate','coda','dplyr', 'stringr')
new.packages<-list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) {install.packages(new.packages)}
library(reticulate)
# install_miniconda() 이 구문은 단 한번만 실행되어야함.
py_install('pandas')
py_install('matplotlib')
reticulate::repl_python()
import os
import pandas as pd
import numpy as np
import matplotlib as plt
# 데이터셋 임포트
os.chdir(r'C:\Users\styli\Desktop\펭귄\dataset')
train = pd.read_csv('train.csv')
quit
reticulate::repl_python()
# 결측값 있는 열 값 확인
nacell = train[train.isna().sum(axis=1) > 0]
# 특이 패턴 없음.
quit
reticulate::repl_python()
# 결측값 있는 열 값 확인
nacell = train[train.isna().sum(axis=1) > 0]
print(nacell)
# 특이 패턴 없음.
quit
reticulate::repl_python()
# 결측값 있는 열 값 확인
pd.set_option('display.max_columns', None) # 모든 열 출력 위함.
nacell = train[train.isna().sum(axis=1) > 0]
print(nacell)
# 특이 패턴 없음.
quit
reticulate::repl_python()
# 테스트셋 미리 확인.
test = pd.read_csv('test.csv')
test.info()
test = test.drop("id",axis=1)
# test에서도, sex, delta15, delta 13에서만 결측 발생중. id행 무쓸모 함.
# 즉 결측처리는 이 3행에 대해 실시하여야함.
quit
reticulate::repl_python()
train.loc[:,'Sex'].describe()
train.loc[:,'Sex'].value_counts()
# Sex의 최빈은 MAlE
train.loc[:,'Delta 15 N (o/oo)'].describe()
train.loc[:,'Delta 15 N (o/oo)'].mean()
# delta 15의 평균은 8.73.... 해당연산값
train.loc[:,'Delta 13 C (o/oo)'].describe()
train.loc[:,'Delta 13 C (o/oo)'].mean()
# delta 13의 평균은 -25.72....
quit
reticulate::repl_python()
train.loc[:,'Sex'] = train.loc[:,'Sex'].fillna('MALE')
train.loc[:,'Delta 15 N (o/oo)'] = train.loc[:,'Delta 15 N (o/oo)'].fillna(train.loc[:,'Delta 15 N (o/oo)'].mean())
train.loc[:,'Delta 13 C (o/oo)'] = train.loc[:,'Delta 13 C (o/oo)'].fillna(train.loc[:,'Delta 13 C (o/oo)'].mean())
# train[train.isna().sum(axis=1) > 0]
train.info() # 결측값 더이상 없음 확인 -> rangeidx 114 = 모든 요소 114 non-null으로 확인됨.
#%%
# 기저작업 동일하게 실시
test.loc[:,'Sex'] = test.loc[:,'Sex'].fillna('MALE')
test.loc[:,'Delta 15 N (o/oo)'] = test.loc[:,'Delta 15 N (o/oo)'].fillna(train.loc[:,'Delta 15 N (o/oo)'].mean())
test.loc[:,'Delta 13 C (o/oo)'] = test.loc[:,'Delta 13 C (o/oo)'].fillna(train.loc[:,'Delta 13 C (o/oo)'].mean())
#test[test.isna().sum(axis=1) > 0]
test.info() # 결측값 더이상 없음 확인 -> rangeidx 228 = 모든 요소 228 non-null으로 확인됨.
quit
reticulate::repl_python()
from collections import defaultdict
from sklearn.preprocessing import LabelEncoder
class MultiColLabelEncoder:
def __init__(self):
self.encoder_dict = defaultdict(LabelEncoder)
def fit_transform(self, X: pd.DataFrame, columns: list):
if not isinstance(columns, list):
columns = [columns]
output = X.copy()
output[columns] = X[columns].apply(lambda x: self.encoder_dict[x.name].fit_transform(x))
return output
# 얘는 에러 대처 없어서, 없는 이름 나오면 바로 에러. 그냥 코드 수정해서 적합.
def transform(self, X: pd.DataFrame, columns: list):
if not isinstance(columns, list):
columns = [columns]
output = X.copy()
output[columns] = X[columns].apply(lambda x: self.encoder_dict[x.name].transform(x))
return output
def inverse_transform(self, X: pd.DataFrame, columns: list):
if not isinstance(columns, list):
columns = [columns]
if not all(key in self.encoder_dict for key in columns):
raise KeyError(f'At least one of {columns} is not encoded before')
output = X.copy()
try:
output[columns] = X[columns].apply(lambda x: self.encoder_dict[x.name].inverse_transform(x))
except ValueError:
print(f'Need assignment when do "fit_transform" function')
raise
return output
# 사용 예제는 아래와 같음.
quit
list.of.packages<-c('reticulate','coda','dplyr', 'stringr')
new.packages<-list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) {install.packages(new.packages)}
library(reticulate)
# install_miniconda() 이 구문은 단 한번만 실행되어야함. 중복설치 허용하지 않음. anaconda-spyder, pycharm 사용시 설치되었을 수도 있음.
py_install('pandas')
py_install('matplotlib')
py_install('sklearn')
py_install('sklearn')
py_install('sklearn')
setwd('C:/Users/styli/Desktop/데이콘 프로젝트/펭귄/dataset')
setwd('C:/Users/styli/Desktop/데이콘 프로젝트/동아리 pj-펭귄/dataset')
library(data.table)
library(dplyr)
library(ggplot2)
train = fread('train.csv')
str(train)
table(train$Species)
table(train$Island)
table(train$`Clutch Completion`)
table(train$Sex) # 결측 3
library(gridExtra)
a = ggplot(train, aes(Species))+geom_bar()
b = ggplot(train, aes(Island))+geom_bar()
c = ggplot(train, aes(`Clutch Completion`))+geom_bar()
d = ggplot(train, aes(Sex))+geom_bar()
grid.arrange(a,b,c,d, nrow=2, ncol=2)
train %>% select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% summary()
train %>% select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% summary()
par(mfrow=c(2,3))
hist(train$`Culmen Depth (mm)`)
hist(train$`Culmen Length (mm)`)
hist(train$`Flipper Length (mm)`)
hist(train$`Delta 15 N (o/oo)`)
hist(train$`Delta 13 C (o/oo)`)
hist(train$`Body Mass (g)`)
a = ggplot(train, aes(`Culmen Depth (mm)`)) + geom_boxplot()
b = ggplot(train, aes(`Culmen Length (mm)`)) + geom_boxplot()
c = ggplot(train, aes(`Flipper Length (mm)`)) + geom_boxplot()
d = ggplot(train, aes(`Delta 15 N (o/oo)`)) + geom_boxplot()
e = ggplot(train, aes(`Delta 13 C (o/oo)`)) + geom_boxplot()
f = ggplot(train, aes(`Body Mass (g)`)) + geom_boxplot()
grid.arrange(a,b,c,d,e,f, nrow=2, ncol=3)
rm(a,b,c,d,e,f)
# 상관관게 분석(피어슨 상관계수-수치형 자료 한정)
train %>% select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% cor()
# 에러발생
# 결측 탐색.
train %>% is.na() %>% colSums()
# 결측처리 - 행 버리기
train %>% na.omit() %>%
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>%
cor() %>% print()
# 상관관게 분석(피어슨 상관계수-수치형 자료 한정)
train %>% select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% cor()
# 에러발생
# 결측 탐색.
train %>% is.na() %>% colSums()
# 결측처리 - 행 버리기
train %>% na.omit() %>%
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>%
cor() %>% print()
train %>% na.omit() %>%
select(c('Culmen Depth (mm)','Culmen Length (mm)','Flipper Length (mm)','Delta 15 N (o/oo)','Delta 13 C (o/oo)','Body Mass (g)')) %>% plot()
train %>% group_by('Sex')
train %>% group_by('Sex') %>% print()
train %>% group_by('Sex') %>% summary()
train %>% group_by('Sex') %>% summarise(summary())
train %>% group_by('Sex') %>% plot()
nset = train %>% group_by('Sex')
nset
str(train)
str(nset)
nset = train %>% group_by('Sex')
ggplot(train, aes(`Culmen Length (mm)`) + geom_bar() + facet_wrap(~Sex, ncol=2))
nset = train %>% group_by('Sex')
ggplot(train, aes('Culmen Depth (mm)') + geom_bar() + facet_wrap(~Sex, ncol=2))
nset = train %>% group_by('Sex')
ggplot(train, aes(`Culmen Depth (mm)`)) + geom_bar() + facet_wrap(~Sex, ncol=2)
nset = train %>% group_by('Sex')
ggplot(train, aes(`Culmen Depth (mm)`)) + geom_histogram() + facet_wrap(~Sex, ncol=2)
nset = train %>% group_by('Sex')
ggplot(train, aes(`Culmen Depth (mm)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
nset = train %>% group_by('Sex')
ggplot(train, aes(`Culmen Depth (mm)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
# factor_wrap => 출력이 여러개 나올수 있는 factor형은 겹처서 그려지는데, 이걸 전개해서 그리는것.
ggplot(train, aes(`Culmen Length (mm)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
ggplot(train, aes(`Flipper Length (mm)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
ggplot(train, aes(`Delta 15 N (o/oo)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
ggplot(train, aes(`Body Mass (g)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
nset = train %>% group_by('Sex')
a1 = ggplot(train, aes(`Culmen Depth (mm)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
# factor_wrap => 출력이 여러개 나올수 있는 factor형은 겹처서 그려지는데, 이걸 전개해서 그리는것.
a2 = ggplot(train, aes(`Culmen Length (mm)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
a3 = ggplot(train, aes(`Flipper Length (mm)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
a4 = ggplot(train, aes(`Delta 15 N (o/oo)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
a5 = ggplot(train, aes(`Delta 13 C (o/oo)`)) + geom_histogram() + facet_wrap(Sex~., ncol=3)
grid.arrange(a1,a2,a3,a4,a5, nrow=5)
train %>% group_by('Sex') %>%
summarise(Culmen_Depth =summary(`Culmen Depth (mm)`),
Culmen_Length =summary(`Culmen Length (mm)`),
Flipper_Length =summary(`Flipper Length (mm)`),
Delta_15 =summary(`Delta 15 N (o/oo)`),
Delta_13 =summary(`Delta 13 C (o/oo)`))
train %>% group_by(Sex) %>%
summarise(Culmen_Depth =summary(`Culmen Depth (mm)`),
Culmen_Length =summary(`Culmen Length (mm)`),
Flipper_Length =summary(`Flipper Length (mm)`),
Delta_15 =summary(`Delta 15 N (o/oo)`),
Delta_13 =summary(`Delta 13 C (o/oo)`))
train %>% group_by(Sex)
train %>% na.omit() %>% group_by(Sex) %>%
summarise(Culmen_Depth =summary(`Culmen Depth (mm)`),
Culmen_Length =summary(`Culmen Length (mm)`),
Flipper_Length =summary(`Flipper Length (mm)`),
Delta_15 =summary(`Delta 15 N (o/oo)`),
Delta_13 =summary(`Delta 13 C (o/oo)`))
train %>% na.omit() %>% group_by(Sex)
train %>% na.omit() %>% group_by(Sex) %>%
summarise(Culmen_Depth =summary(`Culmen Depth (mm)`))
train %>% na.omit() %>% group_by(Sex) %>% summarise(Culmen_Depth = summary(`Culmen Depth (mm)`))
train %>% na.omit() %>% group_by(Sex)
aa =  train %>% na.omit() %>% group_by(Sex)
View(aa)
str(aa)
length(aa)
train %>% na.omit() %>% group_by(Sex) %>% summarise(Culmen_Depth = mean(`Culmen Depth (mm)`))
train %>% na.omit() %>% group_by(Sex) %>%
summarise(Culmen_Depth = mean(`Culmen Depth (mm)`),
Culmen_Length = mean(`Culmen Length (mm)`),
Flipper_Length = mean(`Flipper Length (mm)`),
Delta_15 = mean(`Delta 15 N (o/oo)`),
Delta_13 = mean(`Delta 13 C (o/oo)`))
train %>% na.omit() %>% group_by(Sex) %>%
summarise(Culmen_Depth = mean(`Culmen Depth (mm)`),
Culmen_Length = mean(`Culmen Length (mm)`),
Flipper_Length = mean(`Flipper Length (mm)`),
Delta_15 = mean(`Delta 15 N (o/oo)`),
Delta_13 = mean(`Delta 13 C (o/oo)`))
train %>% na.omit() %>% group_by(Sex) %>%
summarise(Culmen_Depth = mean(`Culmen Depth (mm)`),
Culmen_Length = mean(`Culmen Length (mm)`),
Flipper_Length = mean(`Flipper Length (mm)`),
Delta_15 = mean(`Delta 15 N (o/oo)`),
Delta_13 = mean(`Delta 13 C (o/oo)`))
aa = train %>% na.omit() %>% group_by(Sex) %>%
summarise(Culmen_Depth = mean(`Culmen Depth (mm)`),
Culmen_Length = mean(`Culmen Length (mm)`),
Flipper_Length = mean(`Flipper Length (mm)`),
Delta_15 = mean(`Delta 15 N (o/oo)`),
Delta_13 = mean(`Delta 13 C (o/oo)`))
View(aa)
